package edu.rice.bayou.experiments.predict_asts;

import edu.rice.bayou.dsl.DASTNode;
import edu.rice.bayou.dsl.DSubTree;
import edu.rice.bayou.dsl.Sequence;

import java.util.ArrayList;
import java.util.List;

public class BinarySequencesMetric extends MetricCalculator {

    public BinarySequencesMetric(List<DSubTree> predictedASTs, List<Sequence> givenSequences, List<Sequence> unseenSequences) {
        super(null, predictedASTs, givenSequences, unseenSequences);
    }

    /* Checks whether each given/unseen sequence is a subsequence (Sequences.isSubsequenceOf) of
     * some generated sequence from a predicted AST.
     */
    @Override
    public void doCalculation() {
        int correct = 0;
        DSubTree correctAST = null;
        for (DSubTree predictedAST: predictedASTs) {
            /* get all sequences generated by the predicted AST */
            List<Sequence> generatedSeqs;
            try {
                generatedSeqs = getGeneratedSequences(predictedAST, 10, 10, true);
            } catch (DASTNode.TooManySequencesException|DASTNode.TooLongSequenceException e) {
                continue;
            }

            /* check if all the given sequences are contained in the sequences generated by AST */
            int count = 0;
            for (Sequence givenSequence: givenSequences)
                for (Sequence genSequence: generatedSeqs)
                    if (givenSequence.isSubsequenceOf(genSequence)) {
                        count++;
                        break;
                    }
            if (count == givenSequences.size()) {
                correct += 1;
                correctAST = predictedAST; /* choose one predicted AST to further check generalization */
            }
        }

        /* check generalization by checking how many sequences that were NOT GIVEN to us
         * from original AST are still generated by the chosen "correct" predicted AST */
        List<Sequence> generatedSeqs = new ArrayList<>();
        generatedSeqs.add(new Sequence());
        if (correctAST != null) {
            try {
                correctAST.updateSequences(generatedSeqs, 10, 10);
            } catch (DASTNode.TooManySequencesException|DASTNode.TooLongSequenceException e) {
                System.err.println("Too many sequences from AST");
            }
        }

        int generalize = 0;
        for (Sequence unseenSequence : unseenSequences)
            for (Sequence genSequence : generatedSeqs)
                if (unseenSequence.isSubsequenceOf(genSequence)) {
                    generalize++;
                    break;
                }
        System.out.println(correct + "/" + predictedASTs.size() + " correct ASTs, " +
                generalize + "/" + unseenSequences.size() + " unseen sequences generated by one of the correct ASTs");
    }
}
